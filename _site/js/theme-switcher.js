document.addEventListener('DOMContentLoaded', function() {
  // Initial theme determination
  let initialGlobalTheme = localStorage.getItem('theme');
  if (!initialGlobalTheme && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    initialGlobalTheme = 'dark';
  } else if (!initialGlobalTheme) {
    initialGlobalTheme = 'light'; // Default to light if no localStorage and no OS preference for dark
  }
  const savedColor = localStorage.getItem('color') || 'blue'; // Default color

  // Apply initial/saved preferences
  document.body.className = ''; // Clear any static classes from HTML
  document.body.classList.add(initialGlobalTheme, savedColor);
  updateStylesheet(); // Initial call to load the correct stylesheet
  
  // Set initial button states
  setActiveThemeButton(initialGlobalTheme);
  setActiveColorButton(savedColor);

  // Set up theme toggle buttons
  document.getElementById('light-mode-button').addEventListener('click', function() {
    document.body.classList.remove('dark');
    document.body.classList.add('light');
    localStorage.setItem('theme', 'light');
    setActiveThemeButton('light');
    updateStylesheet();
  });

  document.getElementById('dark-mode-button').addEventListener('click', function() {
    document.body.classList.remove('light');
    document.body.classList.add('dark');
    localStorage.setItem('theme', 'dark');
    setActiveThemeButton('dark');
    updateStylesheet();
  });

  // Set up color buttons
  document.querySelectorAll('.color-button').forEach(button => {
    button.addEventListener('click', function() {
      const color = this.getAttribute('data-color');
      
      document.body.classList.remove('blue', 'purple', 'yellow');
      document.body.classList.add(color);
      
      localStorage.setItem('color', color);
      setActiveColorButton(color);
      updateStylesheet();
    });
  });

  // Handle window resize for responsive design
  window.addEventListener('resize', updateStylesheet);
});

function setActiveThemeButton(activeTheme) {
// Remove active/inactive classes from all theme buttons
document.getElementById('light-mode-button').classList.remove('button-active', 'button-inactive');
document.getElementById('dark-mode-button').classList.remove('button-active', 'button-inactive');

// Set active button
if (activeTheme === 'light') {
  document.getElementById('light-mode-button').classList.add('button-active');
  document.getElementById('dark-mode-button').classList.add('button-inactive');
} else {
  document.getElementById('dark-mode-button').classList.add('button-active');
  document.getElementById('light-mode-button').classList.add('button-inactive');
}
}

function setActiveColorButton(activeColor) {
// Remove active/inactive classes from all color buttons
document.querySelectorAll('.color-button').forEach(button => {
  button.classList.remove('button-active', 'button-inactive');
});

// Set active button and inactive others
document.querySelectorAll('.color-button').forEach(button => {
  const buttonColor = button.getAttribute('data-color');
  if (buttonColor === activeColor) {
    button.classList.add('button-active');
  } else {
    button.classList.add('button-inactive');
  }
});
}

function updateStylesheet() {
const currentThemeMode = document.body.classList.contains('dark') ? 'dark' : 'light';
const currentBrandColor = document.body.classList.contains('blue') ? 'blue' : 
                        document.body.classList.contains('purple') ? 'purple' : 'yellow';
const deviceType = getDeviceType();

// Construct the theme identifier based on conventions from config.mjs and $themes.json
// This should match the 'name' generated by permutateThemes
const themeIdentifier = `input-${currentBrandColor}-${currentThemeMode}-${deviceType}-output-comp`;

const cssFileName = `/css/_variables-${themeIdentifier}.css`;

const stylesheet = document.getElementById('theme-stylesheet');
if (stylesheet.getAttribute('href') !== cssFileName) {
  stylesheet.setAttribute('href', cssFileName);
}
}

function getDeviceType() {
const width = window.innerWidth;
if (width < 768) return 'mobile';
if (width < 1024) return 'tablet';
return 'desktop';
}